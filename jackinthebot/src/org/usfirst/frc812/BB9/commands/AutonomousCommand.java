// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc812.BB9.commands;
import org.usfirst.frc812.BB9.RobotMap;


import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc812.BB9.Robot;

/**
 *
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
/*        Robot.controlBoxSubsystem.readBits();
        Robot.controlBoxSubsystem.printBits();

        if(Robot.controlBoxSubsystem.isSet(4))	{ 	//Normal
        	System.out.println("Auto: switch 4 timeout");
        	setTimeout(3.0);
        } 
        else if(Robot.controlBoxSubsystem.isSet(5))	{	//Moats
        	System.out.println("Auto: switch 5 timeout");
        	setTimeout(7.0);
        }
        else if(Robot.controlBoxSubsystem.isSet(6)) {		//Cheval
        	System.out.println("Auto: switch 6 timeout");
        	setTimeout(7.0);
        }
        else{
        	System.out.println("Auto: default timeout");
        	setTimeout(7.0);
        }
*/
    /*
        if(!(Robot.controlBoxSubsystem.isSet(4) && Robot.controlBoxSubsystem.isSet(5)) ){ //State: 0, 0
        	setTimeout(2.0);
        }
        else if(!(Robot.controlBoxSubsystem.isSet(4)) && Robot.controlBoxSubsystem.isSet(5) ){ //State: 0, 1
        	setTimeout(4.0);
        }
        else if(Robot.controlBoxSubsystem.isSet(4) && ! Robot.controlBoxSubsystem.isSet(5) ){ //State: 1, 0
        	setTimeout(6.0);
        }
        else { //State: 1, 1
        	setTimeout(8.0);
        }
        */
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.controlBoxSubsystem.readBits();
    	System.out.println("Auto: initialize");
    	Robot.controlBoxSubsystem.printBits();
    	
    	// How long is it to drive in autonomous?
        if(Robot.controlBoxSubsystem.isSet(4))	{ 	//Normal
        	System.out.println("Auto: switch 4 timeout");
        	setTimeout(7.0);
        } 
//        else if(Robot.controlBoxSubsystem.isSet(5))	{	//Moats
//        	System.out.println("Auto: switch 5 timeout");
//        	setTimeout(7.0);
//        }
        else if(Robot.controlBoxSubsystem.isSet(6)) {		//Cheval
        	System.out.println("Auto: switch 6 timeout");
        	setTimeout(7.0);
        }
        else{
        	System.out.println("Auto: default timeout");
        	setTimeout(0.0);
        }
        
        // Do we put down the arms or not?
    	if(Robot.controlBoxSubsystem.isSet(6)) {		//Put arms down for Cheval
    		Robot.ballGathererSubsystem.down();
    		
        	try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	/*
        	Robot.ballGathererSubsystem.up();
        	try {        	
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        	Robot.ballGathererSubsystem.down();
        	*/
        	
    	}
    	RobotMap.dtProductionRobotDrive.drive(0, 0);
    	RobotMap.dtProductionRobotDrive.setExpiration(0.1);
    	RobotMap.gyro.reset();
    	
    }
    

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double angle;
    	Robot.controlBoxSubsystem.readBits();
    	if(Robot.controlBoxSubsystem.isSet(4)) {	//Normal
    		RobotMap.dtProductionRobotDrive.drive(1.00, Robot.gyroSubsystem.calcCurve()); // straight
    	}

    	else if(Robot.controlBoxSubsystem.isSet(5)) {	//Moats
    		RobotMap.dtProductionRobotDrive.drive(1.00, Robot.gyroSubsystem.calcCurve()); // straight
    	} 
    	else if(Robot.controlBoxSubsystem.isSet(6)) {		//Cheval
    		RobotMap.dtProductionRobotDrive.drive(1.00, Robot.gyroSubsystem.calcCurve()); // straight
    	} 
    	else{
    		RobotMap.dtProductionRobotDrive.drive(1.00, Robot.gyroSubsystem.calcCurve()); // straight
    	}
    //	Robot.gyroSubsystem.showPosition();
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.dtProductionRobotDrive.drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
